name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Generate cache key
        id: cache-key
        run: echo "key=node-modules-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache node modules
        uses: actions/cache@v3
        id: cache-deps
        with:
          path: node_modules
          key: ${{ steps.cache-key.outputs.key }}

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: dist
          key: build-${{ github.sha }}

  test:
    runs-on: ubuntu-latest
    needs: [setup]

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: dist
          key: build-${{ github.sha }}

      - name: Run tests
        run: npm test

      - name: Run tests with coverage (Node 20.x only)
        if: matrix.node-version == '20.x'
        run: npm test -- --coverage --coverageReporters=text-lcov > coverage.lcov

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.lcov
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    needs: [setup]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run linting
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

  performance:
    runs-on: ubuntu-latest
    needs: [setup]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: dist
          key: build-${{ github.sha }}

      - name: Run performance benchmarks
        run: |
          echo "ðŸš€ Running performance tests..."
          npm test -- --testNamePattern="performance|benchmark" --verbose || echo "No performance tests found"

      - name: Bundle size check
        run: |
          echo "ðŸ“¦ Checking bundle size..."
          ls -lh dist/
          echo "ESM bundle size: $(stat -c%s dist/index.esm.js | numfmt --to=iec-i --suffix=B)"
          echo "CJS bundle size: $(stat -c%s dist/index.cjs.js | numfmt --to=iec-i --suffix=B)"

  integration:
    runs-on: ubuntu-latest
    needs: [setup]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Restore node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: dist
          key: build-${{ github.sha }}

      - name: Pack package
        run: npm pack

      - name: Test package installation
        run: |
          mkdir test-install
          cd test-install
          npm init -y
          npm install ../react-rx-signals-*.tgz
          echo "âœ… Package installed successfully"

      - name: Test package imports
        run: |
          cd test-install
          cat > test-import.js << 'EOF'
          const { createSignal, createStore, useSignal, useStore } = require('react-rx-signals');
          console.log('âœ… CJS import successful');
          console.log('Available exports:', Object.keys(require('react-rx-signals')));
          EOF
          node test-import.js

  build:
    runs-on: ubuntu-latest
    needs: [test, lint, performance, integration]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Restore build artifacts
        uses: actions/cache@v3
        with:
          path: dist
          key: build-${{ github.sha }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Generate build summary
        run: |
          echo "## ðŸŽ‰ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "âœ… All tests passed" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Linting passed" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Performance checks completed" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Integration tests passed" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Package built successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¦ Bundle Information" >> $GITHUB_STEP_SUMMARY
          echo "- ESM bundle: $(stat -c%s dist/index.esm.js | numfmt --to=iec-i --suffix=B)" >> $GITHUB_STEP_SUMMARY
          echo "- CJS bundle: $(stat -c%s dist/index.cjs.js | numfmt --to=iec-i --suffix=B)" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript definitions: $(stat -c%s dist/index.d.ts | numfmt --to=iec-i --suffix=B)" >> $GITHUB_STEP_SUMMARY
